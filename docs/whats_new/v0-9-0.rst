v0.9.0 - Kelvin's Kingdom (June, 27, 2025)
++++++++++++++++++++++++++++++++++++++++++

This version of tespy comes with a refactoring of the complete presolver and
solver back-end. This comes with many changes in the back-end APIs and
potentially with unintended consequences for models, which were recently
working and stopped working with this version. All tests in tespy including
the different models have been carried out successfully in context of the
refactoring, but it cannot be guaranteed, that this is the case for all models.
For that reason: **We are looking forward for your feedback to the new**
**version**. You can submit your feedback on this
`GitHub discussion <https://github.com/oemof/tespy/discussions/>`__.

On the high-level API (what users see when working with the standard components
of tespy) few changes have been made, they are listed below. In constrast, the
back-end has changed quite a bit. The most relevant changes in your custom
component implementations are listed in that sections. Apart from these
changes, further API changes will follow in the future. These will be
dealing with:

- The units of different quantities so that both component and connection
  parameters can be associated with non-SI units in a structured way.
- The post-processing of components and connections will be harmonized.

High-level API changes
######################
- The :code:`UserDefinedEquation` now needs additional specifications. You
  have to provide the :code:`dependents` and the :code:`deriv` has become
  optional. The :code:`dependents` keyword takes a function, which returns a
  list of variables the equation depends on and then automatically performs the
  calculation of all partial derivatives. The :code:`deriv` method may still be
  passed, in this case, it will be used instead of automatically determining
  the derivatives.

  In the :code:`deriv` method, the placement of values in the Jacobian has
  changed and should now be made through the :code:`partial_derivative` method
  of the :code:`UserDefinedEquation` instance.

  See the :ref:`docs <tespy_ude_label>` for the specific implementations.

- The :code:`reset_topology_reduction_specifications` method of the
  :code:`Network` has been depricated and is not required anymore.
- The :code:`Bus` class and the :code:`ExergyAnalysis` class will be depricated
  in the next major version release following v0.9. The :code:`PowerConnection`
  and the respective power components replace the :code:`Bus` class. The
  :code:`ExergyAnalysis` feature moved to an external library:
  `exerpy <https://github.com/oemof/exerpy>`__.

Back-end API changes
####################
- The mandatory constraints of components are also stored in
  :code:`DataContainer` instances, instead of plain dictionaries.
- Every mandatory constraint or component parameter associated with an
  equation now requires the specification of the :code:`dependents` keyword,
  which is a method, that returns the variables, the equation depends on,
  similar to the :code:`UserDefinedEquation`. This allos the solver to
  automatically determine the partial derivatives of the corresponding
  equation.
- The specification of the :code:`deriv` method is now optional for
  **parameters, that are associated with a single equation**. It overrides the
  automatic derivative calculation using the :code:`dependents` and may be
  useful in context of analytical derivative formulations. For multi-equation
  parameters, the :code:`deriv` method formulation is still mandatory.
- Instead of providing a :code:`func` and :code:`depdenents` for equations,
  that connect pairs of two variables in a linear way, e.g. pressure ratio or
  delta pressure specification, enthalpy or mass flow equality, etc., it is now
  possible to provide a :code:`structure_matrix` method. This method will be
  used be the presolving steps to reduce the variable space by creating
  mappings between the physical variables on the different connections to
  variables, that can represent multiple other variables at the same time. This
  reduces the size of the problem and can improve calculation speed. In the
  future, this will also simplify the activating or deactivating of specific
  variables for the solver or removing parts of the network.
- For a couple of examples please refer to the updated documentation section
  on :ref:`custom components <tespy_components_custom_components_label>`.

New Features
############
- The :code:`Bus` class will be deprecated in favor of :code:`PowerConnections`
  with respective components :code:`PowerSource`, :code:`Motor`,
  :code:`Generator`, :code:`PowerSink` and :code:`PowerBus`. These are optional
  connections and components, that can connect to components like
  :code:`Turbine`, :code:`Compressor`, :code:`Pump` or
  :code:`SimpleHeatExchanger`. It streamlines the API between connections
  transporting material flows and connections with non-material flows. For more
  information and examples please check
  :ref:`this section in the docs <tespy_powerconnections_label>`.
- The new version of tespy comes with great debugging capabilities, which allow
  you to explore, which variables have been solved in presolving with the help
  of which equations. Also, the variables left for the solver to solve for and
  the corresponding equations can be outputted after the presolving. Read
  more information in the new section on
  :ref:`debugging <tespy_networks_debugging_label>`.
- With the refactored preprocessing, it linear relationships between pairs of
  variables (e.g. inlet to outlet pressure with specified pressure ratio) will
  be presolved in a way, that fixing any of the pressure values in a branch of
  connected pressure values will determine the value of all of them. This will
  help you with the initial set up of your model: At the example of the
  pressure, there is no difference anymore between fixing one pressure value
  with a number of pressure ratios or pressure differences between connections
  in a connected branch and fiing individual pressure values for all of
  those connections (as it was recommended to generate stable starting values
  before version 0.9).
- You can now customize the orientiation for the optimization by passing
  a list of :code:`True` and :code:`False` values in the :code:`minimize`
  argument (`PR #704 <https://github.com/oemof/tespy/pull/704>`__).

Known Issues
############
- The setting of starting values is still done connection by connection, even
  if the variable of one connection is linearly dependent to a variable of a
  different connection and both are mapped to a common variable for the final
  problem formulation. The starting value for the common variable will be taken
  from one of the both original variables. The procedure will be updated in a
  future release.
- The :code:`Bus` class preprocessing and solving process has not been apdated
  to the same back-end API as it has been done for the components, connections
  and user defined equations as the class is deprecated.

Other Changes
#############
- Removed python 3.9 support.
- Removed :code:`load_network` and :code:`document_models` modules.

Bug Fixes
#########
- Fixed a bug which made the simulation crash, when using :code:`MITSW` or
  :code:`LiBr` as fluids as their :code:`T_freeze` is equal to 0 K in CoolProp
  (`PR #703 <https://github.com/oemof/tespy/pull/703>`__).

Contributors
############
- Francesco Witte (`@fwitte <https://github.com/fwitte>`__)
